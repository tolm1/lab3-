// 3 задача, сервка

#include <boost/asio.hpp>
#include <boost/bind/bind.hpp>
#include <iostream>
#include <memory>

#include <string>
#include <sstream>

#include <windows.h>                                        

static int oldin = 0, oldout = 0;



using boost::asio::ip::tcp;
namespace asio = boost::asio;

class Session : public std::enable_shared_from_this<Session> {

public:
    Session(tcp::socket socket, asio::io_context& io_context)
        : socket_(std::move(socket)), timer_(io_context) {
    }

    void start() {
        std::setlocale(LC_ALL, "Russian");
        read();
    }

private:
    void read() {
        std::setlocale(LC_ALL, "Russian");
        auto self(shared_from_this());
        asio::async_read_until(socket_, asio::dynamic_buffer(data_), '\n',
            [this, self](boost::system::error_code ec, std::size_t) {
                if (!ec) {
                    std::cout << "RAW: " << data_; // лог
                    std::string command;
                    int value;

                    std::istringstream iss(data_);
                    iss >> command >> value;
                    data_.clear();

                    std::cout << "Parsed command: " << command << ", value: " << value << std::endl;

                    if (command == "timer") {
                        handle_timer(value);
                    }
                    else {
                        write("Неизвестная команда\n");
                    }
                }
            });
    }

    void handle_timer(int seconds) {
        std::setlocale(LC_ALL, "Russian");
        auto self(shared_from_this());
        timer_.expires_after(std::chrono::seconds(seconds));
        timer_.async_wait([this, self, seconds](boost::system::error_code ec) {
            if (!ec) {
                write("Прошло " + std::to_string(seconds) + " секунд!\n");
            }
            });
    }

    void handle_number(int number) {
        std::setlocale(LC_ALL, "Russian");
        write("Вы прислали число: " + std::to_string(number) + "\n");
    }

    void write(const std::string& message) {
        std::setlocale(LC_ALL, "Russian");
        auto self(shared_from_this());
        asio::async_write(socket_, asio::buffer(message),
            [this, self](boost::system::error_code ec, std::size_t) {
                if (!ec) {
                    read(); // продолжить чтение
                }
            });
    }

    tcp::socket socket_;
    asio::steady_timer timer_;
    std::string data_;
};

class Server {
public:
    Server(asio::io_context& io_context, short port)
        : acceptor_(io_context, tcp::endpoint(tcp::v4(), port)),
        io_context_(io_context) {
        accept();
    }

private:
    void accept() {
        std::setlocale(LC_ALL, "Russian");
        acceptor_.async_accept([this](boost::system::error_code ec, tcp::socket socket) {
            if (!ec) {
                std::cout << "Новое подключение\n";
                std::make_shared<Session>(std::move(socket), io_context_)->start();
            }
            accept();
            });
    }

    tcp::acceptor acceptor_;
    asio::io_context& io_context_;
};

int main() {
    std::setlocale(LC_ALL, "Russian");
    try {
        asio::io_context io_context;
        Server server(io_context, 12345);
        std::cout << "Сервер запущен на порту 12345\n";
        io_context.run();
    }
    catch (std::exception& e) {
        std::cerr << "Ошибка: " << e.what() << std::endl;
    }
    return 0;
}
