// 2 задача, сервак

#include <boost/asio.hpp>
#include <iostream>
#include <memory>

using boost::asio::ip::tcp;

uint64_t factorial(int n) {
	uint64_t res = 1;
	for (int i = 2; i <= n; ++i) res *= i;
	return res;
}


class Session : public std::enable_shared_from_this<Session> {
public:
	Session(tcp::socket socket) : socket_(std::move(socket)) {}
	void start() {
		do_read();
	}
private:
	void do_read() {
		auto self(shared_from_this());
		socket_.async_read_some(boost::asio::buffer(data_),
			[this, self](boost::system::error_code ec, std::size_t length) {
				if (!ec) {
					try {
						std::string input(data_, length);
						int n = std::stoi(input);
						uint64_t result = factorial(n);
						response_ = std::to_string(result);
					}
					catch (...) {
						response_ = "Ошибка: ожидалось число";
					}
					do_write();
				}
			});
	}
	void do_write() {
		auto self(shared_from_this());
		boost::asio::async_write(socket_, boost::asio::buffer(response_),
			[this, self](boost::system::error_code ec, std::size_t /*length*/) {
				
			});
	}
	tcp::socket socket_;
	char data_[1024];
	std::string response_;
};

class Server {
public:
	Server(boost::asio::io_context& io_context, short port)
		: acceptor_(io_context, tcp::endpoint(tcp::v4(), port)) {
		do_accept();
	}
private:
	void do_accept() {
		acceptor_.async_accept(
			[this](boost::system::error_code ec, tcp::socket socket) {
				if (!ec) {
					std::make_shared<Session>(std::move(socket))->start();
				}
				do_accept();
			});
	}
	tcp::acceptor acceptor_;
};
int main() {
	std::setlocale(LC_ALL, "Russian");
	try {
		boost::asio::io_context io;
		Server s(io, 12345);
		std::cout << "Сервер запущен на порту 12345\n";
		io.run();
	}
	catch (std::exception& e) {
		std::cerr << "Ошибка: " << e.what() << std::endl;
	}
}
